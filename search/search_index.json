{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#sqlalchemy-admin-for-starlettefastapi","title":"SQLAlchemy Admin for Starlette/FastAPI","text":"<p>SQLAdmin is a flexible Admin interface for SQLAlchemy models.</p> <p>Main features include:</p> <ul> <li>SQLAlchemy sync/async engines</li> <li>Starlette integration</li> <li>FastAPI integration</li> <li>SQLModel support</li> <li>Modern UI using Tabler</li> </ul> <p>Documentation: https://aminalaee.dev/sqladmin</p> <p>Source Code: https://github.com/aminalaee/sqladmin</p> <p>Online Demo: Demo</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install sqladmin\n</code></pre>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#quickstart","title":"Quickstart","text":"<p>Let's define an example SQLAlchemy model:</p> <pre><code>from sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\n\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n\nBase.metadata.create_all(engine)  # Create tables\n</code></pre> <p>If you want to use <code>SQLAdmin</code> with <code>FastAPI</code>:</p> <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\n\n\napp = FastAPI()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>Or if you want to use <code>SQLAdmin</code> with <code>Starlette</code>:</p> <pre><code>from sqladmin import Admin, ModelView\nfrom starlette.applications import Starlette\n\n\napp = Starlette()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>Now visiting <code>/admin</code> on your browser you can see the <code>SQLAdmin</code> interface.</p>"},{"location":"#related-projects-and-inspirations","title":"Related projects and inspirations","text":"<ul> <li>Flask-Admin Admin interface for Flask supporting different database backends and ORMs. This project has inspired SQLAdmin extensively and most of the features and configurations are implemented the same.</li> <li>FastAPI-Admin Admin interface for FastAPI which works with <code>TortoiseORM</code>.</li> <li>Dashboard Admin interface for ASGI frameworks which works with the <code>orm</code> package.</li> </ul>"},{"location":"authentication/","title":"Authentication","text":"<p>SQLadmin does not enforce any authentication to your application, but provides an optional <code>AuthenticationBackend</code> you can use.</p>"},{"location":"authentication/#authenticationbackend","title":"AuthenticationBackend","text":"<p>SQLAdmin has a session-based authentication that will allow you to integrate any existing authentication to it.</p> <p>The class <code>AuthenticationBackend</code> has three methods you need to override:</p> <ul> <li><code>authenticate</code>: Will be called for validating each incoming request.</li> <li><code>login</code>: Will be called only in the login page to validate username/password.</li> <li><code>logout</code>: Will be called only for the logout, usually clearin the session.</li> </ul> <pre><code>from typing import Optional\n\nfrom sqladmin import Admin\nfrom sqladmin.authentication import AuthenticationBackend\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse\n\n\nclass AdminAuth(AuthenticationBackend):\n    async def login(self, request: Request) -&gt; bool:\n        form = await request.form()\n        username, password = form[\"username\"], form[\"password\"]\n\n        # Validate username/password credentials\n        # And update session\n        request.session.update({\"token\": \"...\"})\n\n        return True\n\n    async def logout(self, request: Request) -&gt; bool:\n        # Usually you'd want to just clear the session\n        request.session.clear()\n        return True\n\n    async def authenticate(self, request: Request) -&gt; Optional[RedirectResponse]:\n        token = request.session.get(\"token\")\n\n        if not token:\n            return RedirectResponse(request.url_for(\"admin:login\"), status_code=302)\n\n        # Check the token in depth\n\n\nauthentication_backend = AdminAuth(secret_key=\"...\")\nadmin = Admin(app=..., authentication_backend=authentication_backend\u060c ...)\n</code></pre> <p>Note</p> <p>In order to use AuthenticationBackend you need to install the <code>itsdangerous</code> package.</p> Full Example <pre><code>from typing import Optional\n\nfrom sqladmin import Admin, ModelView\nfrom sqladmin.authentication import AuthenticationBackend\nfrom sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse\n\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n\nBase.metadata.create_all(engine)\n\n\nclass AdminAuth(AuthenticationBackend):\n    async def login(self, request: Request) -&gt; bool:\n        request.session.update({\"token\": \"...\"})\n        return True\n\n    async def logout(self, request: Request) -&gt; bool:\n        request.session.clear()\n        return True\n\n    async def authenticate(self, request: Request) -&gt; Optional[RedirectResponse]:\n        if not \"token\" in request.session:\n            return RedirectResponse(request.url_for(\"admin:login\"), status_code=302)\n\n\napp = Starlette()\nauthentication_backend = AdminAuth(secret_key=\"...\")\nadmin = Admin(app=app, engine=engine, authentication_backend=authentication_backend)\n\n\nclass UserAdmin(ModelView, model=User):\n    def is_visible(self, request: Request) -&gt; bool:\n        return True\n\n    def is_accessible(self, request: Request) -&gt; bool:\n        return True\n\n\nadmin.add_view(UserAdmin)\n</code></pre>"},{"location":"authentication/#using-oauth","title":"Using OAuth","text":"<p>You can also integrate OAuth into SQLAdmin, for this example we will integrate Google OAuth using <code>Authlib</code>. If you have followed the previous example, there are only two changes required to the authentication flow:</p> <pre><code>from typing import Optional\n\nfrom authlib.integrations.starlette_client import OAuth\nfrom sqladmin.authentication import AuthenticationBackend\nfrom starlette.applications import Starlette\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse\n\n\napp = Starlette()\napp.add_middleware(SessionMiddleware, secret_key=\"test\")\n\noauth = OAuth()\noauth.register(\n    'google',\n    client_id='...',\n    client_secret='...',\n    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',\n    client_kwargs={\n        'scope': 'openid email profile',\n        'prompt': 'select_account',\n    },\n)\ngoogle = oauth.create_client('google')\n\n\nclass AdminAuth(AuthenticationBackend):\n    async def login(self, request: Request) -&gt; bool:\n        return True\n\n    async def logout(self, request: Request) -&gt; bool:\n        request.session.clear()\n        return True\n\n    async def authenticate(self, request: Request) -&gt; Optional[RedirectResponse]:\n        user = request.session.get(\"user\")\n        if not user:\n            redirect_uri = request.url_for('login_google')\n            return await google.authorize_redirect(request, redirect_uri)\n\n\nadmin = Admin(app=app, engine=engine, authentication_backend=AdminAuth(\"test\"))\n\n\n@admin.app.route(\"/auth/google\")\nasync def login_google(request: Request) -&gt; Response:\n    token = await google.authorize_access_token(request)\n    user = token.get('userinfo')\n    if user:\n        request.session['user'] = user\n    return RedirectResponse(request.url_for(\"admin:index\"))\n</code></pre>"},{"location":"authentication/#permissions","title":"Permissions","text":"<p>The <code>ModelView</code> and <code>BaseView</code> classes in SQLAdmin implements two special methods you can override. You can use these methods to have control over each Model/View in addition to the AuthenticationBackend. So this is more like checking if the user has access to the specific Model or View.</p> <ul> <li><code>is_visible</code></li> <li><code>is_accessible</code></li> </ul> <p>As you might guess the <code>is_visible</code> controls if this Model/View should be displayed in the menu or not.</p> <p>The <code>is_accessible</code> controls if this Model/View should be accessed.</p> <p>Both methods implement the same signature and should return a boolean.</p> <p>Note</p> <p>For Model/View to be displayed in the sidebar both <code>is_visible</code> and <code>is_accessible</code> should return <code>True</code>.</p> <p>So in order to override these methods:</p> <pre><code>from starlette.requests import Request\n\n\nclass UserAdmin(ModelView, model=User):\n    def is_accessible(self, request: Request) -&gt; bool:\n        # Check incoming request\n        # For example request.session if using AuthenticationBackend\n        return True\n\n    def is_visible(self, request: Request) -&gt; bool:\n        # Check incoming request\n        # For example request.session if using AuthenticationBackend\n        return True\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#version-0110-2023-05-23","title":"Version 0.11.0 - 2023-05-23","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Add ability to specify custom actions in #486</li> <li>Add <code>ChoiceType</code> in #482</li> <li>Add sqlalchemy_fields URLType converter in #493</li> <li>Upgrade fontawesome in #481</li> </ul> <p>Full Changelog: https://github.com/aminalaee/sqladmin/compare/0.10.3...0.11.0</p>"},{"location":"changelog/#version-0103-2023-04-21","title":"Version 0.10.3 - 2023-04-21","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fix ImageType converter in #471</li> <li>reset UploadFile seek after reading in #473</li> <li>Fix unnecessary joins in details and edit page in #476</li> </ul>"},{"location":"changelog/#version-0102-2023-04-15","title":"Version 0.10.2 - 2023-04-15","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fix nullable string fields in #465</li> <li>Fix Multiselect field saving only one value in #463</li> </ul>"},{"location":"changelog/#version-0101-2023-03-25","title":"Version 0.10.1 - 2023-03-25","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix PK getters for related objects in #449</li> </ul>"},{"location":"changelog/#version-0100-2023-03-15","title":"Version 0.10.0 - 2023-03-15","text":""},{"location":"changelog/#breaking-change","title":"Breaking change","text":"<ul> <li>Change AuthenticationBackend <code>authenticate</code> signature to support OAuth in #440</li> </ul>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add File field in #424</li> <li>Support SQLALchemy Interval type in #438</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fix docstrings in #434</li> <li>Update to work with Starlette URL type in url_for in #444</li> <li>Fix nullable Integers to accept zero value in #445</li> </ul>"},{"location":"changelog/#version-090-2023-02-07","title":"Version 0.9.0 - 2023-02-07","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Support SQLAlchemy v2 in #411</li> <li>Support PostgreSQL arrays in #414</li> <li>Add custom form converters in #399</li> <li>Support SQLAlchemy composite types in #421</li> <li>Add sqlalchemy_utils <code>PhoneNumberType</code>, <code>ColorType</code> and <code>ArrowType</code> in #422</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fix re-rendering create/edit page with existing data in #385</li> <li>Fix exclude columns breaking order in #407</li> <li>Fix control relationships in list page in #409</li> <li>Fix asyncpg BigInt query in #416</li> </ul>"},{"location":"changelog/#version-080-2022-11-22","title":"Version 0.8.0 - 2022-11-22","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Add <code>save_as</code> option by @aminalaee in #377</li> <li>Add <code>save_as_continue</code> option by @aminalaee in #379</li> <li>Add extra Save buttons for Create/Edit page by @aminalaee in #373</li> <li>Display errors in alert for create/edit page by @aminalaee in #382</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Fix <code>_url_for</code> methods ignoring root_path by @aminalaee in #371</li> <li>Fix export to use <code>list_query</code> option by @villqrd in #381</li> </ul>"},{"location":"changelog/#version-070-2022-11-03","title":"Version 0.7.0 - 2022-11-03","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Add <code>on_model_change</code> and <code>after_model_change</code> methods in #342</li> <li>Add <code>on_model_delete</code> and <code>after_model_delete</code> methods in #343</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fix search by uuid column in #366</li> <li>Update tests after starlette upgrade in #344</li> <li>Remove hard-coded related model limit in #354</li> <li>Improve items list UI in #349</li> <li>Make navbar work on small screens in #362</li> </ul>"},{"location":"changelog/#internal","title":"Internal","text":"<ul> <li>Add mypy check with config no_implicit_optional in #360</li> <li>Support test-suite py311 in #365</li> <li>Add py.typed for the package to ship its typing information in #346</li> </ul>"},{"location":"changelog/#version-061-2022-09-25","title":"Version 0.6.1 - 2022-09-25","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Fix Boolean field for both nullable and non-nullable cases in #336</li> <li>Fix Flatpickr not respecting readonly inputs in #336</li> <li>Disable batch delete when can_delete permission is not provided in #335</li> </ul>"},{"location":"changelog/#version-060-2022-09-19","title":"Version 0.6.0 - 2022-09-19","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Add bulk delete action in #317</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Handle null values when column is nullable in #323</li> <li>Switch Boolean field to select field in #321</li> </ul>"},{"location":"changelog/#internal_1","title":"Internal","text":"<ul> <li>Fix form_ajax_refs example in documentation in #311</li> <li>Remove watch in mkdocstrings mkdocs's config in #306</li> </ul>"},{"location":"changelog/#version-050-2022-09-06","title":"Version 0.5.0 - 2022-09-06","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Add <code>remote_ajax_refs</code> in #292</li> </ul>"},{"location":"changelog/#internal_2","title":"Internal","text":"<ul> <li>Avoid select query with ajax_form_refs in #300</li> <li>Add docs for form_ajax_refs in #302</li> </ul>"},{"location":"changelog/#version-040-2022-08-31","title":"Version 0.4.0 - 2022-08-31","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Add Date and DateTime pickers using Fatpickr in #288</li> <li>Add Time picker using Flatpickr in #294</li> </ul>"},{"location":"changelog/#internal_3","title":"Internal","text":"<ul> <li>Remove MomentJS in #289</li> <li>Remove Select2 widgets in #293</li> </ul>"},{"location":"changelog/#version-030-2022-08-26","title":"Version 0.3.0 - 2022-08-26","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Add <code>AuthenticationBackend</code> in #277</li> <li>Update Authentication docs in #278</li> </ul>"},{"location":"changelog/#version-021-2022-08-04","title":"Version 0.2.1 - 2022-08-04","text":""},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Fix <code>middlewares</code> and <code>ENGINE_TYPE</code> types in #266</li> <li>Fix middlewares not being applied in #267 and #271</li> </ul>"},{"location":"changelog/#version-020-2022-08-01","title":"Version 0.2.0 - 2022-08-01","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Add <code>list_query</code>, <code>count_query</code> and <code>search_query</code> options in #243</li> <li>Add <code>BaseView</code> for custom pages in #244</li> <li>Add <code>expose</code> for BaseView in #251</li> <li>Rename <code>ModelAdmin</code> to <code>ModelView</code> in #249</li> </ul>"},{"location":"changelog/#version-0112-2022-07-13","title":"Version 0.1.12 - 2022-07-13","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Add time field converter in #214</li> <li>Add Edit button for \"Details\" page in #222</li> <li>Add column_type_formatters in #239</li> </ul>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Fix lazy subuqery in list query in #212</li> <li>Fix missing browser tab title in #229</li> <li>Remove sourceMappingURL in JS files in #231</li> </ul>"},{"location":"changelog/#version-0111-2022-06-23","title":"Version 0.1.11 - 2022-06-23","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Add <code>form_include_pk</code> option in #207</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Fix handling of iterable fields in #204</li> <li>Fix nullable Enum form in #205</li> </ul>"},{"location":"changelog/#version-0110-2022-06-21","title":"Version 0.1.10 - 2022-06-21","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Add support for one-to-one relationship in #186</li> <li>Add support for UUIDType from sqlalchemy_utils in #183</li> <li>Add sqlalchemy_utils URL, Currency and  Timezone in #185</li> <li>Add form_widget_args in #188</li> <li>Add column_default_sort in #191</li> </ul>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Fix link relationship to details page when null in #174</li> <li>docs: fix typos in #161</li> <li>Allow QuerySelectField override object_list with form_args in #171</li> <li>Fix form fields order when specifying columns in #184</li> <li>Fix ModelConverter when <code>impl</code> is not callable in #186</li> </ul>"},{"location":"changelog/#version-019-2022-05-27","title":"Version 0.1.9 - 2022-05-27","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Add <code>column_formatters</code> in #140</li> <li>Add <code>column_formatters_detail</code> in #141</li> <li>Handling for sqlalchemy_utils EmailType and IPAddressType in #150</li> <li>Link relationships to detail page in #153</li> </ul>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Function signature typing, and renames in #116</li> <li>Fix SQLModel UUID type in #158</li> </ul>"},{"location":"changelog/#version-018-2022-04-19","title":"Version 0.1.8 - 2022-04-19","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li>Add csv export support in #101</li> <li>Expose Starlette middlewares and debug to the Admin in #114</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Fix Export unlimited rows in #107</li> <li>Add form and export options docs in #110</li> <li>fix docstring issues by adding an explicit handler in #106</li> <li>Fix get_model_attr with column labels in #128</li> <li>Delay call to <code>self.get_converter</code> to use <code>form_overrides</code> in #129</li> </ul>"},{"location":"changelog/#version-017-2022-03-22","title":"Version 0.1.7 - 2022-03-22","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>Add SQLModel support in #94</li> <li>Add form-specific functionality to ModelAdmin in #97</li> <li>Add <code>UUID</code> field converter in #82</li> <li>Add PostgreSQL <code>INET</code> and <code>MACADDR</code> converters in #83</li> </ul>"},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Fix Boolean field checkbox UI in #88</li> <li>Fix PostgreSQL UUID PrimaryKey in #92</li> <li>Fix Source Code Link in #95</li> </ul>"},{"location":"changelog/#version-016-2022-03-09","title":"Version 0.1.6 - 2022-03-09","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>FontAwesome6 icons in #78</li> <li>Add <code>column_sortable_list</code> in #65</li> <li>Add JSON column converters in #74</li> </ul>"},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>Fix URL search regex in #67</li> <li>Fix Enum in Edit page in #71</li> </ul>"},{"location":"changelog/#version-015-2022-02-24","title":"Version 0.1.5 - 2022-02-24","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>Authentication in #37</li> <li>Add Edit view page in #60</li> <li>Add <code>column_searchable_list</code> in #61</li> </ul>"},{"location":"changelog/#internal_4","title":"Internal","text":"<ul> <li>Cleanup DB queries in #51</li> </ul>"},{"location":"changelog/#version-014-2022-02-16","title":"Version 0.1.4 - 2022-02-16","text":""},{"location":"changelog/#added_18","title":"Added","text":"<ul> <li>Allow templates to be configured in #52</li> <li>Add page size option links in #34</li> </ul>"},{"location":"changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Improve pagination in #36</li> </ul>"},{"location":"changelog/#internal_5","title":"Internal","text":"<ul> <li>Instantiate ModelAdmin internally to avoid class methods in #31</li> </ul>"},{"location":"changelog/#version-013-2022-01-24","title":"Version 0.1.3 - 2022-01-24","text":""},{"location":"changelog/#added_19","title":"Added","text":"<ul> <li>Add <code>title</code> and <code>logo</code> options in #20</li> <li>Adding <code>order_by</code> to list pagination query in #25</li> <li>Allow Relationship properties in list and detail views in #22</li> </ul>"},{"location":"configurations/","title":"Configurations","text":"<p>SQLAdmin configuration options are heavily inspired by the Flask-Admin project.</p> <p>This page will give you a basic introduction and for all the details you can visit API Reference.</p> <p>Let's say you've defined your SQLAlchemy models like this:</p> <pre><code>from sqlalchemy import Column, Integer, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\n\n\nBase = declarative_base()\nengine = create_engine(\n    \"sqlite:///example.db\",\n    connect_args={\"check_same_thread\": False},\n)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n\n\nBase.metadata.create_all(engine)  # Create tables\n</code></pre> <p>If you want to integrate SQLAdmin into FastAPI application:</p> <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\n\n\napp = FastAPI()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>As you can see the <code>UserAdmin</code> class inherits from <code>ModelView</code> and accepts some configurations.</p>"},{"location":"configurations/#permissions","title":"Permissions","text":"<p>You can configure a few general permissions for this model. The following options are available:</p> <ul> <li><code>can_create</code>: If the model can create new instances via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_edit</code>: If the model instances can be edited via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_delete</code>: If the model instances can be deleted via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_view_details</code>: If the model instance details can be viewed via SQLAdmin. Default value is <code>True</code>.</li> <li><code>can_export</code>: If the model data can be exported in the list page. Default value is <code>True</code>.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    can_create = True\n    can_edit = True\n    can_delete = False\n    can_view_details = True\n</code></pre>"},{"location":"configurations/#metadata","title":"Metadata","text":"<p>The metadata for the model. The options are:</p> <ul> <li><code>name</code>: Display name for this model. Default value is the class name.</li> <li><code>name_plural</code>: Display plural name for this model. Default value is class name + <code>s</code>.</li> <li><code>icon</code>: Icon to be displayed for this model in the admin. Only FontAwesome names are supported.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    name = \"User\"\n    name_plural = \"Users\"\n    icon = \"fa-solid fa-user\"\n</code></pre>"},{"location":"configurations/#list-page","title":"List page","text":"<p>These options allow configurations in the list page, in the case of this example where you can view list of User records.</p> <p>The options available are:</p> <ul> <li><code>column_list</code>: List of columns or column names to be displayed in the list page.</li> <li><code>column_exclude_list</code>: List of columns or column names to be excluded in the list page.</li> <li><code>column_formatters</code>: Dictionary of column formatters in the list page.</li> <li><code>column_searchable_list</code>: List of columns or column names to be searchable in the list page.</li> <li><code>column_sortable_list</code>: List of columns or column names to be sortable in the list page.</li> <li><code>column_default_sort</code>: Default sorting if no sorting is applied, tuple of (column, is_descending) or list of the tuple for multiple columns.</li> <li><code>list_query</code>: A SQLAlchemy <code>select</code> expression to use for model list page.</li> <li><code>count_query</code>: A SQLAlchemy <code>select</code> expression to use for model count.</li> <li><code>search_query</code>: A method with the signature of <code>(stmt, term) -&gt; stmt</code> which can customize the search query.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n    column_searchable_list = [User.name]\n    column_sortable_list = [User.id]\n    column_formatters = {User.name: lambda m, a: m.name[:10]}\n    column_default_sort = [(User.email, True), (User.name, False)]\n</code></pre> <p>Tip</p> <p>You can use the special keyword <code>\"__all__\"</code> in <code>column_list</code> or <code>column_details_list</code> if you don't want to specify all the columns manually. For example: <code>column_list = \"__all__\"</code></p>"},{"location":"configurations/#details-page","title":"Details page","text":"<p>These options allow configurations in the details page, in the case of this example where you can view details of a single User.</p> <p>The options available are:</p> <ul> <li><code>column_details_list</code>: List of columns or column names to be displayed in the details page.</li> <li><code>column_details_exclude_list</code>: List of columns or column names to be excluded in the details page.</li> <li><code>column_formatters_detail</code>: Dictionary of column formatters in the details page.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    column_details_list = [User.id, User.name]\n    column_formatters_detail = {User.name: lambda m, a: m.name[:10]}\n</code></pre>"},{"location":"configurations/#pagination-options","title":"Pagination options","text":"<p>The pagination options in the list page can be configured. The available options include:</p> <ul> <li><code>page_size</code>: Default page size in pagination. Default is <code>10</code>.</li> <li><code>page_size_options</code>: Pagination selector options. Default is <code>[10, 25, 50, 100]</code>.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    page_size = 50\n    page_size_options = [25, 50, 100, 200]\n</code></pre>"},{"location":"configurations/#general-options","title":"General options","text":"<p>There are a few options which apply to both List and Detail pages. They include:</p> <ul> <li><code>column_labels</code>: A mapping of column labels, used to map column names to new names in all places.</li> <li><code>column_type_formatters</code>: A mapping of type keys and callable values to format in all places. For example you can add custom date formatter to be used in both list and detail pages.</li> <li><code>save_as</code>: A boolean to enable \"save as new\" option when editing an object.</li> <li><code>save_as_continue</code>: A boolean to control the redirect URL if <code>save_as</code> is enabled.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    def date_format(value):\n        return value.strftime(\"%d.%m.%Y\")\n\n    column_labels = {User.mail: \"Email\"}\n    column_type_formatters = dict(ModelView.column_type_formatters, date=date_format)\n    save_as = True\n</code></pre>"},{"location":"configurations/#form-options","title":"Form options","text":"<p>SQLAdmin allows customizing how forms work with your models. The forms are based on <code>WTForms</code> package and include the following options:</p> <ul> <li><code>form</code>: Default form to be used for creating or editing the model. Default value is <code>None</code> and form is created dynamically.</li> <li><code>form_base_class</code>: Default base class for creating forms. Default value is <code>wtforms.Form</code>.</li> <li><code>form_args</code>: Dictionary of form field arguments supported by WTForms.</li> <li><code>form_widget_args</code>: Dictionary of form widget rendering arguments supported by WTForms.</li> <li><code>form_columns</code>: List of model columns to be included in the form. Default is all model columns.</li> <li><code>form_excluded_columns</code>: List of model columns to be excluded from the form.</li> <li><code>form_overrides</code>: Dictionary of form fields to override when creating the form.</li> <li><code>form_include_pk</code>: Control if primary key column should be included in create/edit forms. Default is <code>False</code>.</li> <li><code>form_ajax_refs</code>: Use Ajax with Select2 for loading relationship models async. This is use ful when the related model has a lot of records.</li> <li><code>form_converter</code>: Allow adding custom converters to support additional column types.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    form_columns = [User.name]\n    form_args = dict(name=dict(label=\"Full name\"))\n    form_widget_args = dict(email=dict(readonly=True))\n    form_overrides = dict(email=wtforms.EmailField)\n    form_include_pk = True\n    form_ajax_refs = {\n        \"address\": {\n            \"fields\": (\"zip_code\", \"street\"),\n            \"order_by\": (\"id\",),\n        }\n    }\n</code></pre>"},{"location":"configurations/#export-options","title":"Export options","text":"<p>SQLAdmin supports exporting data in the list page. Currently only CSV export is supported. The export options can be set per model and includes the following options:</p> <ul> <li><code>can_export</code>: If the model can be exported. Default value is <code>True</code>.</li> <li><code>column_export_list</code>: List of columns to include in the export data. Default is all model columns.</li> <li><code>column_export_exclude_list</code>: List of columns to exclude in the export data.</li> <li><code>export_max_rows</code>: Maximum number of rows to be exported. Default value is <code>0</code> which means unlimited.</li> <li><code>export_types</code>: List of export types to be enabled. Default value is <code>[\"csv\"]</code>.</li> </ul>"},{"location":"configurations/#templates","title":"Templates","text":"<p>The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are:</p> <ul> <li><code>list_template</code>: Template to use for models list page. Default is <code>list.html</code>.</li> <li><code>create_template</code>: Template to use for model creation page. Default is <code>create.html</code>.</li> <li><code>details_template</code>: Template to use for model details page. Default is <code>details.html</code>.</li> <li><code>edit_template</code>: Template to use for model edit page. Default is <code>edit.html</code>.</li> </ul> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    list_template = \"custom_list.html\"\n</code></pre> <p>For more information about working with template see Working with Templates.</p>"},{"location":"configurations/#events","title":"Events","text":"<p>There might be some cases which you want to do some actions before or after a model was created, updated or deleted.</p> <p>There are four methods you can override to achieve this:</p> <ul> <li><code>on_model_change</code>: Called before a model was created or updated.</li> <li><code>after_model_change</code>: Called after a model was created or updated.</li> <li><code>on_model_delete</code>: Called before a model was deleted.</li> <li><code>after_model_delete</code>: Called after a model was deleted.</li> </ul> <p>By default these methods do nothing.</p> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    async def on_model_change(self, data, model, is_created):\n        # Perform some other action\n        ...\n\n    async def on_model_delete(self, model):\n        # Perform some other action\n        ...\n</code></pre>"},{"location":"configurations/#custom-action","title":"Custom Action","text":"<p>To add custom action on models to the Admin, you can use the <code>action</code> decorator.</p> <p>Example</p> <pre><code>from sqladmin import BaseView, action\n\nclass UserAdmin(ModelView, model=User):\n    @action(\n        name=\"approve_users\",\n        label=\"Approve\",\n        confirmation_message=\"Are you sure?\",\n        add_in_detail=True,\n        add_in_list=True,\n    )\n    async def approve_users(self, request: Request):\n        pks = request.query_params.get(\"pks\", \"\").split(\",\")\n        if pks:\n            for pk in pks:\n                model: User = await self.get_object_for_edit(pk)\n                ...\n\n        referer = request.headers.get(\"Referer\")\n        if referer:\n            return RedirectResponse(referer)\n        else:\n            return RedirectResponse(request.url_for(\"admin:list\", identity=self.identity))\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>The available options for <code>action</code> are:</p> <ul> <li><code>name</code>: A string name to be used in URL for this action.</li> <li><code>label</code>: A string for describing this action.</li> <li><code>add_in_list</code>: A boolean indicating if this action should be available in list page.</li> <li><code>add_in_detail</code>: A boolean indicating if this action should be available in detail page.</li> <li><code>confirmation_message</code>: A string message that if defined, will open a modal to ask for confirmation before calling the action method.</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#how-to-deploy-to-production-with-https-enabled","title":"How to deploy to production with HTTPS enabled?","text":"<p>This is not really related to <code>SQLAdmin</code> but in case you are deploying in a production environment you will enable HTTPS with a reverse proxy like Nginx or Kubernetes Ingress.</p> <p>If you are deploying the application with <code>Uvicorn</code> you can follow the docs for running behind nginx and all you probably need is to start <code>Uvicorn</code> with <code>--forwarded-allow-ips='*'</code> and <code>--proxy-headers</code> to pass the correct HTTP headers.</p>"},{"location":"working_with_files/","title":"Working with Files and Images","text":"<p>You can use the sqlalchemy-fields package which provides some extra fields to use with or without <code>SQLAdmin</code>.</p> <p>Some of the fields included in <code>sqlalchemy-fields</code> are:</p> <ul> <li><code>EmailType</code></li> <li><code>FileType</code></li> <li><code>ImageType</code></li> <li><code>IPAddressType</code></li> <li><code>URLType</code></li> <li><code>UUIDType</code></li> </ul> <p>So here we have custom <code>FileType</code> and <code>ImageType</code> which work out of the box with <code>SQLAdmin</code>.</p> <p>In addition to that, <code>sqlalchemy-fields</code> provides different storages for the file types:</p> <ul> <li><code>FileSystemStorage</code> for storing files in local file system.</li> <li><code>S3Storage</code> for storing files in Amazon S3 or S3-compatible storages.</li> </ul> <p>Let's do a minimal example:</p> <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\nfrom sqlalchemy import Column, Integer, create_engine\nfrom sqlalchemy.orm import declarative_base\nfrom sqlalchemy_fields.storages import FileSystemStorage\nfrom sqlalchemy_fields.types import FileType, IPAddressType\n\n\nBase = declarative_base()\nengine = create_engine(\"sqlite:///example.db\")\napp = FastAPI()\nadmin = Admin(app, engine)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)    \n    file = Column(FileType(storage=FileSystemStorage(path=\"/tmp\")))\n    ip = Column(IPAddressType)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id]\n\n\nBase.metadata.create_all(engine)  # Create tables\n\nadmin.add_view(UserAdmin)\n</code></pre> <p>Now visiting <code>/admin/user</code> to create a new User, there's an HTML file field to upload files form local.</p> <p>The <code>FileSystemStorage</code> is configured to store files in the <code>/tmp</code> directory of your local.</p> <p>Custom types are not limited to <code>SQLAdmin</code>, you can for example query User objects with:</p> <pre><code>import io\n\nfrom fastapi import UploadFile  # Or from starlette.datastructures import UploadFile\nfrom sqlalchemy.orm import Session\n\ndata = io.BytesIO(b\"abc\")  # Simulate a file-like object\nupload_file = UploadFile(file=data, filename=\"example.txt\")\nuser = User(ip=\"127.0.0.1\", file=upload_file)\n\nwith Session(engine) as session:\n    session.add(user)\n    session.commit()\n    print(user.file, type(user.file))\n\n\"\"\"\n/tmp/example.txt, &lt;class 'sqlalchemy_fields.storages.StorageFile'&gt;\n\"\"\"\n</code></pre> <p>So the following return types are available from custom types:</p> <ul> <li><code>StorageFile</code> -&gt; Returned from <code>FileType</code> columns and has file-related properties like name, path, size, etc.</li> <li><code>StorageImage</code> -&gt; Returned from <code>ImageType</code> which is the same as <code>FileType</code> except it includes Image height and width properties.</li> </ul> <p>For complete features and API reference of the <code>sqlalchemy-fields</code> you can visit the docs at https://aminalaee.dev/sqlalchemy-fields.</p>"},{"location":"working_with_templates/","title":"Working with Templates","text":"<p>There are different approaches when it comes to working with templates in SQLAdmin. You can simply replace a template file and implement it yourself, or you could customize parts of the template without implementing the whole page.</p>"},{"location":"working_with_templates/#replacing-templates","title":"Replacing templates","text":"<p>You can create a directory called <code>templates</code> in your project and create relevant template files in it.</p> <p>If you name your files the same way SQLAdmin does, for example <code>list.html</code> or <code>details.html</code> then you don't have to do anything else. They will be picked up by SQLAdmin automatically.</p> <p>But if you name the files something else, then you need to specify the name in your ModelView classes.</p> <p>Example</p> <pre><code>class UserAdmin(ModelView, model=User):\n    details_template = \"details.html\"\n    list_template = \"custom_list.html\"\n</code></pre>"},{"location":"working_with_templates/#customizing-templates","title":"Customizing templates","text":""},{"location":"writing_custom_views/","title":"Working with Custom Views","text":""},{"location":"writing_custom_views/#basic-example","title":"Basic example","text":"<p>You might need to add custom views to the existing SQLAdmin views, for example to create dashboards, show custom info or add new forms.</p> <p>To add custom views to the Admin interface, you can use the <code>BaseView</code> included in SQLAdmin. Here's an example to add custom views:</p> <p>Example</p> <pre><code>from sqladmin import BaseView, expose\n\nclass ReportView(BaseView):\n    name = \"Report Page\"\n    icon = \"fa-chart-line\"\n\n    @expose(\"/report\", methods=[\"GET\"])\n    def report_page(self, request):\n        return self.templates.TemplateResponse(\n            \"report.html\",\n            context={\"request\": request},\n        )\n\nadmin.add_view(ReportView)\n</code></pre> <p>This will assume there's a <code>templates</code> directory in your project and you have created a <code>report.html</code> in that directory.</p> <p>If you want to use a custom directory name, you can change that with:</p> <pre><code>from sqladmin import Admin\n\nadmin = Admin(templates_dir=\"my_templates\", ...)\n</code></pre> <p>Now visiting <code>/admin/report</code> you can render your <code>report.html</code> file.</p>"},{"location":"writing_custom_views/#database-access","title":"Database access","text":"<p>The example above was very basic and you probably want to access database and SQLAlchemy models in your custom view. You can use <code>sessionmaker</code> the same way SQLAdmin is using it to do so:</p> <p>Example</p> <pre><code>from sqlalchemy import Column, Integer, String, select, func\nfrom sqlalchemy.orm import sessionmaker, declarative_base\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom sqladmin import Admin, BaseView, expose\nfrom starlette.applications import Starlette\n\nBase = declarative_base()\nengine = create_async_engine(\"sqlite+aiosqlite:///test.db\")\nSession = sessionmaker(bind=engine, class_=AsyncSession)\n\napp = Starlette()\nadmin = Admin(app=app, engine=engine)\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(length=16))\n\n\nclass ReportView(BaseView):\n    name = \"Report Page\"\n    icon = \"fa-chart-line\"\n\n    @expose(\"/report\", methods=[\"GET\"])\n    async def report_page(self, request):\n        # async with engine.begin() as conn:\n        #     await conn.run_sync(Base.metadata.create_all)\n\n        async with Session(expire_on_commit=False) as session:\n            stmt = select(func.count(User.id))\n            result = await session.execute(stmt)\n            users_count = result.scalar_one()\n\n        return self.templates.TemplateResponse(\n            \"report.html\",\n            context={\"request\": request, \"users_count\": users_count},\n        )\n\n\nadmin.add_view(ReportView)\n</code></pre> <p>Next we update the <code>report.html</code> file in the <code>templates</code> directory with the following content:</p> <p>Example</p> <pre><code>{% extends \"layout.html\" %}\n{% block content %}\n&lt;div class=\"col-12\"&gt;\n&lt;div class=\"card\"&gt;\n    &lt;div class=\"card-header\"&gt;\n    &lt;h3 class=\"card-title\"&gt;User reports&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class=\"card-body border-bottom py-3\"&gt;\n    Users count: {{ users_count }}\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Now running your server you can head to <code>/admin/report</code> and you can see the number of users.</p>"},{"location":"api_reference/application/","title":"Application","text":""},{"location":"api_reference/application/#sqladmin.application.Admin","title":"<code>sqladmin.application.Admin</code>","text":"<p>         Bases: <code>BaseAdminView</code></p> <p>Main entrypoint to admin interface.</p> Usage <pre><code>from fastapi import FastAPI\nfrom sqladmin import Admin, ModelView\n\nfrom mymodels import User # SQLAlchemy model\n\n\napp = FastAPI()\nadmin = Admin(app, engine)\n\n\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n\n\nadmin.add_view(UserAdmin)\n</code></pre>"},{"location":"api_reference/application/#sqladmin.application.Admin.__init__","title":"<code>__init__(app, engine, base_url='/admin', title='Admin', logo_url=None, middlewares=None, debug=False, templates_dir='templates', authentication_backend=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>app</code> <code>Starlette</code> <p>Starlette or FastAPI application.</p> required <code>engine</code> <code>ENGINE_TYPE</code> <p>SQLAlchemy engine instance.</p> required <code>base_url</code> <code>str</code> <p>Base URL for Admin interface.</p> <code>'/admin'</code> <code>title</code> <code>str</code> <p>Admin title.</p> <code>'Admin'</code> <code>logo_url</code> <code>Optional[str]</code> <p>URL of logo to be displayed instead of title.</p> <code>None</code>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin","title":"<code>sqladmin.application.BaseAdmin</code>","text":"<p>Base class for implementing Admin interface.</p> Danger <p>This class should almost never be used directly.</p>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.views","title":"<code>views: List[Union[BaseView, ModelView]]</code>  <code>property</code>","text":"<p>Get list of ModelView and BaseView instances lazily.</p> <p>Returns:</p> Type Description <code>List[Union[BaseView, ModelView]]</code> <p>List of ModelView and BaseView instances added to Admin.</p>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.add_view","title":"<code>add_view(view)</code>","text":"<p>Add ModelView or BaseView classes to Admin. This is a shortcut that will handle both <code>add_model_view</code> and <code>add_base_view</code>.</p>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.add_model_view","title":"<code>add_model_view(view)</code>","text":"<p>Add ModelView to the Admin.</p> Usage <pre><code>from sqladmin import Admin, ModelView\n\nclass UserAdmin(ModelView, model=User):\n    pass\n\nadmin.add_model_view(UserAdmin)\n</code></pre>"},{"location":"api_reference/application/#sqladmin.application.BaseAdmin.add_base_view","title":"<code>add_base_view(view)</code>","text":"<p>Add BaseView to the Admin.</p> Usage <pre><code>from sqladmin import BaseView, expose\n\nclass CustomAdmin(BaseView):\n    name = \"Custom Page\"\n    icon = \"fa-solid fa-chart-line\"\n\n    @expose(\"/custom\", methods=[\"GET\"])\n    def test_page(self, request: Request):\n        return self.templates.TemplateResponse(\n            \"custom.html\",\n            context={\"request\": request},\n        )\n\nadmin.add_base_view(CustomAdmin)\n</code></pre>"},{"location":"api_reference/application/#sqladmin.application.action","title":"<code>sqladmin.application.action(name, label=None, confirmation_message=None, *, include_in_schema=True, add_in_detail=True, add_in_list=True)</code>","text":"<p>Decorate a <code>ModelView</code> function with this to:</p> <ul> <li>expose it as a custom \"action\" route</li> <li>add a button to the admin panel to invoke the action</li> </ul> <p>When invoked from the admin panel, the following query parameter(s) are passed:</p> <ul> <li><code>pks</code>: the comma-separated list of selected object PKs - can be empty</li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Unique name for the action - should be alphanumeric, dash and underscore</p> required <code>label</code> <code>Optional[str]</code> <p>Human-readable text describing action</p> <code>None</code> <code>confirmation_message</code> <code>Optional[str]</code> <p>Message to show before confirming action</p> <code>None</code> <code>include_in_schema</code> <code>bool</code> <p>Indicating if the endpoint be included in the schema</p> <code>True</code> <code>add_in_detail</code> <code>bool</code> <p>Indicating if action should be dispalyed on model detail page</p> <code>True</code> <code>add_in_list</code> <code>bool</code> <p>Indicating if action should be dispalyed on model list page</p> <code>True</code>"},{"location":"api_reference/authentication/","title":"Authentication","text":""},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend","title":"<code>sqladmin.authentication.AuthenticationBackend</code>","text":"<p>Base class for implementing the Authentication into SQLAdmin. You need to inherit this class and override the methods: <code>login</code>, <code>logout</code> and <code>authenticate</code>.</p>"},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.__init__","title":"<code>__init__(secret_key)</code>","text":""},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.authenticate","title":"<code>authenticate(request)</code>  <code>async</code>","text":"<p>Implement authenticate logic here. This method will be called for each incoming request to validate the authentication.</p> <p>If the request is authenticated, this method should return <code>None</code> or do nothing. Otherwise it should return a <code>Response</code> object, like a redirect to the login page or SSO page.</p>"},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.login","title":"<code>login(request)</code>  <code>async</code>","text":"<p>Implement login logic here. You can access the login form data <code>await request.form()</code> andvalidate the credentials.</p>"},{"location":"api_reference/authentication/#sqladmin.authentication.AuthenticationBackend.logout","title":"<code>logout(request)</code>  <code>async</code>","text":"<p>Implement logout logic here. This will usually clear the session with <code>request.session.clear()</code>.</p>"},{"location":"api_reference/base_view/","title":"BaseView","text":""},{"location":"api_reference/base_view/#sqladmin.models.BaseView","title":"<code>sqladmin.models.BaseView</code>","text":"<p>         Bases: <code>BaseModelView</code></p> <p>Base class for defining admnistrative views for the model.</p> Usage <pre><code>from sqladmin import BaseView, expose\n\nclass CustomAdmin(BaseView):\n    name = \"Custom Page\"\n    icon = \"fa-solid fa-chart-line\"\n\n    @expose(\"/custom\", methods=[\"GET\"])\n    def test_page(self, request: Request):\n        return self.templates.TemplateResponse(\n            \"custom.html\",\n            context={\"request\": request},\n        )\n\nadmin.add_base_view(CustomAdmin)\n</code></pre>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.name","title":"<code>name: str = ''</code>  <code>class-attribute</code>","text":"<p>Name of the view to be displayed.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.identity","title":"<code>identity: str = ''</code>  <code>class-attribute</code>","text":"<p>Same as name but it will be used for URL of the endpoints.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.methods","title":"<code>methods: List[str] = ['GET']</code>  <code>class-attribute</code>","text":"<p>List of method names for the endpoint. By default it's set to <code>[\"GET\"]</code> only.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.icon","title":"<code>icon: str</code>  <code>class-attribute</code>","text":"<p>Display icon for ModelAdmin in the sidebar. Currently only supports FontAwesome icons.</p>"},{"location":"api_reference/base_view/#sqladmin.models.BaseView.include_in_schema","title":"<code>include_in_schema: bool = True</code>  <code>class-attribute</code>","text":"<p>Control whether this endpoint should be included in the schema.</p>"},{"location":"api_reference/model_view/","title":"ModelView","text":""},{"location":"api_reference/model_view/#sqladmin.models.ModelView","title":"<code>sqladmin.models.ModelView</code>","text":"<p>         Bases: <code>BaseView</code></p> <p>Base class for defining admnistrative behaviour for the model.</p> Usage <pre><code>from sqladmin import ModelView\n\nfrom mymodels import User # SQLAlchemy model\n\nclass UserAdmin(ModelView, model=User):\n    can_create = True\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.name_plural","title":"<code>name_plural: str = ''</code>  <code>class-attribute</code>","text":"<p>Plural name of ModelView. Default value is Model class name + <code>s</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_labels","title":"<code>column_labels: Dict[MODEL_ATTR, str] = {}</code>  <code>class-attribute</code>","text":"<p>A mapping of column labels, used to map column names to new names. Dictionary keys can be string names or SQLAlchemy columns with string values.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_labels = {User.mail: \"Email\"}\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_create","title":"<code>can_create: bool = True</code>  <code>class-attribute</code>","text":"<p>Permission for creating new Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_edit","title":"<code>can_edit: bool = True</code>  <code>class-attribute</code>","text":"<p>Permission for editing Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_delete","title":"<code>can_delete: bool = True</code>  <code>class-attribute</code>","text":"<p>Permission for deleting Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_view_details","title":"<code>can_view_details: bool = True</code>  <code>class-attribute</code>","text":"<p>Permission for viewing full details of Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_list","title":"<code>column_list: Union[str, Sequence[MODEL_ATTR]] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to display in <code>List</code> page. Columns can either be string names or SQLAlchemy columns.</p> Note <p>By default only Model primary key is displayed.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_exclude_list","title":"<code>column_exclude_list: Sequence[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude in <code>List</code> page. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_exclude_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_formatters","title":"<code>column_formatters: Dict[MODEL_ATTR, Callable[[type, Column], Any]] = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of list view column formatters. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_formatters = {User.name: lambda m, a: m.name[:10]}\n</code></pre> <p>The format function has the prototype:</p> Formatter <pre><code>def formatter(model, attribute):\n    # `model` is model instance\n    # `attribute` is a Union[ColumnProperty, RelationshipProperty]\n    pass\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_formatters_detail","title":"<code>column_formatters_detail: Dict[MODEL_ATTR, Callable[[type, Column], Any]] = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of details view column formatters. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_formatters_detail = {User.name: lambda m, a: m.name[:10]}\n</code></pre> <p>The format function has the prototype:</p> Formatter <pre><code>def formatter(model, attribute):\n    # `model` is model instance\n    # `attribute` is a Union[ColumnProperty, RelationshipProperty]\n    pass\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.page_size","title":"<code>page_size: int = 10</code>  <code>class-attribute</code>","text":"<p>Default number of items to display in <code>List</code> page pagination. Default value is set to <code>10</code>.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    page_size = 25\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.page_size_options","title":"<code>page_size_options: Sequence[int] = [10, 25, 50, 100]</code>  <code>class-attribute</code>","text":"<p>Pagination choices displayed in <code>List</code> page. Default value is set to <code>[10, 25, 50, 100]</code>.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    page_size_options = [50, 100]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_details_list","title":"<code>column_details_list: Union[str, Sequence[MODEL_ATTR]] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to display in <code>Detail</code> page. Columns can either be string names or SQLAlchemy columns.</p> Note <p>By default all columns of Model are displayed.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_details_list = [User.id, User.name, User.mail]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_details_exclude_list","title":"<code>column_details_exclude_list: Sequence[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude from displaying in <code>Detail</code> page. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_details_exclude_list = [User.mail]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.list_template","title":"<code>list_template: str = 'list.html'</code>  <code>class-attribute</code>","text":"<p>List view template. Default is <code>list.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.create_template","title":"<code>create_template: str = 'create.html'</code>  <code>class-attribute</code>","text":"<p>Create view template. Default is <code>create.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.details_template","title":"<code>details_template: str = 'details.html'</code>  <code>class-attribute</code>","text":"<p>Details view template. Default is <code>details.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.edit_template","title":"<code>edit_template: str = 'edit.html'</code>  <code>class-attribute</code>","text":"<p>Edit view template. Default is <code>edit.html</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_searchable_list","title":"<code>column_searchable_list: Sequence[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>A collection of the searchable columns. It is assumed that only text-only fields are searchable, but it is up to the model implementation to decide.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_searchable_list = [User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_sortable_list","title":"<code>column_sortable_list: Sequence[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>Collection of the sortable columns for the list view.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_sortable_list = [User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_default_sort","title":"<code>column_default_sort: Union[str, Tuple[str, bool], list] = []</code>  <code>class-attribute</code>","text":"<p>Default sort column if no sorting is applied.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_default_sort = \"email\"\n</code></pre> <p>You can use tuple to control ascending descending order. In following example, items will be sorted in descending order:</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_default_sort = (\"email\", True)\n</code></pre> <p>If you want to sort by more than one column, you can pass a list of tuples</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_default_sort = [(\"email\", True), (\"name\", False)]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.can_export","title":"<code>can_export: bool = True</code>  <code>class-attribute</code>","text":"<p>Permission for exporting lists of Models. Default value is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_export_list","title":"<code>column_export_list: List[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to include when exporting. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_export_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_export_exclude_list","title":"<code>column_export_exclude_list: List[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude when exporting. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_export_exclude_list = [User.id, User.name]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.export_types","title":"<code>export_types: List[str] = ['csv']</code>  <code>class-attribute</code>","text":"<p>A list of available export filetypes. Currently only <code>csv</code> is supported.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.export_max_rows","title":"<code>export_max_rows: int = 0</code>  <code>class-attribute</code>","text":"<p>Maximum number of rows allowed for export. Unlimited by default.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form","title":"<code>form: Optional[Type[Form]] = None</code>  <code>class-attribute</code>","text":"<p>Form class. Override if you want to use custom form for your model. Will completely disable form scaffolding functionality.</p> Example <pre><code>class MyForm(Form):\n    name = StringField('Name')\n\nclass MyModelView(ModelView, model=User):\n    form = MyForm\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_args","title":"<code>form_args: Dict[str, Dict[str, Any]] = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of form field arguments. Refer to WTForms documentation for list of possible options.</p> Example <pre><code>from wtforms.validators import DataRequired\n\nclass MyModelView(ModelView, model=User):\n    form_args = dict(\n        name=dict(label=\"User Name\", validators=[DataRequired()])\n    )\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_columns","title":"<code>form_columns: Sequence[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to include in the form. Columns can either be string names or SQLAlchemy columns.</p> Note <p>By default all columns of Model are included in the form.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_columns = [User.name, User.mail]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_excluded_columns","title":"<code>form_excluded_columns: Sequence[MODEL_ATTR] = []</code>  <code>class-attribute</code>","text":"<p>List of columns to exclude from the form. Columns can either be string names or SQLAlchemy columns.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_excluded_columns = [User.id]\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_overrides","title":"<code>form_overrides: Dict[str, Type[Field]] = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of form column overrides.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_overrides = dict(name=wtf.FileField)\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_widget_args","title":"<code>form_widget_args: Dict[str, Dict[str, Any]] = {}</code>  <code>class-attribute</code>","text":"<p>Dictionary of form widget rendering arguments. Use this to customize how widget is rendered without using custom template.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_widget_args = {\n        \"email\": {\n            \"readonly\": True,\n        },\n    }\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_include_pk","title":"<code>form_include_pk: bool = False</code>  <code>class-attribute</code>","text":"<p>Control if form should include primary key columns or not.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    form_include_pk = True\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_ajax_refs","title":"<code>form_ajax_refs: Dict[str, dict] = {}</code>  <code>class-attribute</code>","text":"<p>Use Ajax for foreign key model loading. Should contain dictionary, where key is field name and value is a dictionary which configures Ajax lookups.</p> Example <pre><code>class UserAdmin(ModelAdmin, model=User):\n    form_ajax_refs = {\n        'address': {\n            'fields': ('street', 'zip_code'),\n            'order_by': ('id',),\n        }\n    }\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.form_converter","title":"<code>form_converter: Type[ModelConverterBase] = ModelConverter</code>  <code>class-attribute</code>","text":"<p>Custom form converter class. Useful if you want to add custom form conversion in addition to the defaults.</p> Example <pre><code>class PhoneNumberConverter(ModelConverter):\n    pass\n\nclass UserAdmin(ModelAdmin, model=User):\n    form_converter = PhoneNumberConverter\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.column_type_formatters","title":"<code>column_type_formatters: Dict[Type, Callable] = BASE_FORMATTERS</code>  <code>class-attribute</code>","text":"<p>Dictionary of value type formatters to be used in the list view.</p> <p>By default, two types are formatted:</p> <pre><code>- None will be displayed as an empty string\n- bool will be displayed as a checkmark if it is True otherwise as an X.\n</code></pre> <p>If you don\u2019t like the default behavior and don\u2019t want any type formatters applied, just override this property with an empty dictionary:</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_type_formatters = dict()\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.list_query","title":"<code>list_query: Select = select()</code>  <code>class-attribute</code>","text":"<p>The SQLAlchemy select expression used for the list page which can be customized. By default it will select all objects without any filters.</p> Example <pre><code>from sqlalchemy import select\n\nclass UserAdmin(ModelView, model=User):\n    list_query = select(User).filter(User.active == True)\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.count_query","title":"<code>count_query: Select = select()</code>  <code>class-attribute</code>","text":"<p>The SQLAlchemy select expression used for the count query which can be customized. By default it will select all objects without any filters.</p> Example <pre><code>from sqlalchemy import select\n\nclass UserAdmin(ModelView, model=User):\n    count_query = select(func.count(User.id))\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.save_as","title":"<code>save_as: bool = False</code>  <code>class-attribute</code>","text":"<p>Set <code>save_as</code> to enable a \u201csave as new\u201d feature on admin change forms.</p> <p>Normally, objects have three save options: <code>`Save</code>, <code>Save and continue editing</code> and <code>Save and add another</code>.</p> <p>If save_as is True, <code>Save and add another</code> will be replaced  by a <code>Save as new</code> button  that creates a new object (with a new ID)  rather than updating the existing object.</p> <p>By default, <code>save_as</code> is set to <code>False</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.save_as_continue","title":"<code>save_as_continue: bool = True</code>  <code>class-attribute</code>","text":"<p>When <code>save_as=True</code>, the default redirect after saving the new object  is to the edit view for that object. If you set <code>save_as_continue=False</code>, the redirect will be to the list view.</p> <p>By default, <code>save_as_continue</code> is set to <code>True</code>.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.search_placeholder","title":"<code>search_placeholder()</code>","text":"<p>Return search placeholder text.</p> Example <pre><code>class UserAdmin(ModelView, model=User):\n    column_labels = dict(name=\"Name\", email=\"Email\")\n    column_searchable_list = [User.name, User.email]\n\n# placeholder is: \"Name, Email\"\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.search_query","title":"<code>search_query(stmt, term)</code>","text":"<p>Specify the search query given the SQLAlchemy statement and term to search for. It can be used for doing more complex queries like JSON objects. For example:</p> <pre><code>return stmt.filter(MyModel.name == term)\n</code></pre>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.on_model_change","title":"<code>on_model_change(data, model, is_created)</code>  <code>async</code>","text":"<p>Perform some actions before a model is created or updated. By default does nothing.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.after_model_change","title":"<code>after_model_change(data, model, is_created)</code>  <code>async</code>","text":"<p>Perform some actions after a model was created or updated and committed to the database. By default does nothing.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.on_model_delete","title":"<code>on_model_delete(model)</code>  <code>async</code>","text":"<p>Perform some actions before a model is deleted. By default does nothing.</p>"},{"location":"api_reference/model_view/#sqladmin.models.ModelView.after_model_delete","title":"<code>after_model_delete(model)</code>  <code>async</code>","text":"<p>Perform some actions after a model is deleted. By default do nothing.</p>"}]}